local knit = require("knit")

function sel(cond, t, f)
    if cond then return t else return f end
end

local build = include("build/build.knit")
local conf = include("build/default.knit")

local machine = build.machine(conf.board, false)
if machine == nil then
    return "could not find machine for board " .. board
end

local tools = build.tools(machine)
local flags = build.flags(machine, conf.lto, conf.release, false)

local meta = r{
    $ .kobj/%.o: %.s
        $(tools.cc) $(flags.as) $input -c -o $output
    $ .kobj/%.o:D[.kobj/deps/%.dep]: %.d
        $(tools.dc) $(flags.dc) -Ikernel -Ilibd $input -c -of $output -makedeps=.kobj/deps/$match.dep
    $ %.bin: %.elf
        $(tools.objcopy) $input -O binary $output
    $ %.boot.elf:B: %.payload
        knit -f build/bootloader.knit kboot=1 kenter=1 payload=$input bootloader.elf board=$(conf.board) release=$(conf.release) lto=$(conf.lto)
        mv bootloader.elf $output
    $ %.boot.bin:B: %.payload
        knit -f build/bootloader.knit kboot=1 kenter=1 payload=$input bootloader.bin board=$(conf.board) release=$(conf.release) lto=$(conf.lto)
        mv bootloader.bin $output
    $ %.boot.list:B: %.payload
        knit -f build/bootloader.knit kboot=1 kenter=1 payload=$input bootloader.list board=$(conf.board) release=$(conf.release) lto=$(conf.lto)
        mv bootloader.list $output
    $ %.bin.out: %.bin
        ./firmware/visionfive/fsz.sh $input $output
    $ %.payload: %.elf
        plboot make -o $output $input
    $ %.list: %.elf
        $(tools.objdump) -D $input > $output
}

local lib = knit.rglob("libd", "*.d")

local kernel = knit.join(
    knit.rglob(f"kernel/arch/$(machine.arch)", "*.d"),
    knit.rglob("kernel/dev", "*.d"),
    knit.filterout(knit.glob("kernel/*.d"), {"kernel/main.d"}),
    {
        "kernel/arch/package.d",
        "kernel/board/package.d",
        f"kernel/board/$(machine.board).d",
    }
)

local src = {
    kernel = knit.join(
        lib,
        kernel,
        {
            "kernel/main.d",
        }
    )
}

local obj = {
    kernel = knit.join(
        knit.extrepl(src.kernel, ".d", ".o"),
        {
            f"kernel/arch/$(machine.arch)/kernelasm.o",
        }
    ),
}
obj.kernel = knit.prefix(".kobj/", obj.kernel)

local link = {
    kernel = f"link/$(machine.board)/kernel.ld",
    extra = sel(conf.entry == nil, "", f"-Wl,--section-start=.text=$(conf.entry)"),
}

local kernel = r{
    $ kernel.elf: $(obj.kernel) $(link.kernel)[I]
        $(tools.ld) $(flags.ld) -T$(link.kernel) $(link.extra) $input -o $output
    $ qemu:VB: kernel.boot.elf
        $(tools.qemu) $(flags.qemu) -no-reboot -kernel $input
    $ qemu-gdb:VB: kernel.boot.elf
        $(tools.qemu) $(flags.qemu) -no-reboot -s -S -kernel $input &
        $(tools.gdb) -ex "file $input" -ex "target remote localhost:1234"
}

local allsrc = knit.rglob(".", "*.d")

return b{
    $ all:V: kernel.boot.bin

    $ bootloader.elf:B:
        knit -f build/bootloader.knit kboot=1 kenter=1 bootloader.elf board=$(conf.board) release=$(conf.release) lto=$(conf.lto)

    $ format:VB:
        dfmt -i --brace_style=otbs $allsrc
    $ clean:VB:
        knit -f build/bootloader.knit :all -t clean
        knit :all -t clean
        rm -rf *.list *.bin *.bin.out
    $ prog:VB: kernel.elf
        plboot prog $input

    kernel,
    meta
}
