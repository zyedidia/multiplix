local knit = require("knit")

function getopt(profile)
    if profile == "dev" then
        return {
            level = "O1",
            lto = false,
        }
    elseif profile == "debug" then
        return {
            level = "Og",
            lto = false,
        }
    elseif profile == "unopt" then
        return {
            level = "O0",
            lto = false,
        }
    elseif profile == "release" then
        return {
            level = "O3",
            lto = true,
        }
    elseif profile == "small" then
        return {
            level = "Os",
            lto = true,
        }
    end
end

local machines = {
    raspi3 = {
        arch = "aarch64",
        triple = "aarch64-none-elf",
        board = "raspi3",
        march = "armv8-a+crc",
        mcpu = "cortex-a53",
        mattr = "-sve,-fp-armv8",
        mflags = "-mgeneral-regs-only",
        qemu = "qemu-system-aarch64 -M raspi3ap -serial null -serial mon:stdio",
        timer = 19200000,
    },
    raspi4 = {
        arch = "aarch64",
        triple = "aarch64-none-elf",
        board = "raspi4",
        march = "armv8-a+crc",
        mcpu = "cortex-a72",
        mattr = "-sve,-fp-armv8",
        mflags = "-mgeneral-regs-only",
        qemu = "qemu-system-aarch64 -M raspi4b -serial null -serial mon:stdio",
        timer = 54000000,
    },
    orpiz2 = {
        arch = "aarch64",
        triple = "aarch64-none-elf",
        board = "orpiz2",
        march = "armv8-a+crc",
        mcpu = "cortex-a53",
        mattr = "-sve,-fp-armv8",
        mflags = "-mgeneral-regs-only",
        qemu = "qemu-system-aarch64 -M orpiz2 -serial null -serial mon:stdio",
    },
    virt_riscv64 = {
        arch = "riscv64",
        triple = "riscv64-unknown-elf",
        board = "virt_riscv64",
        mabi = "lp64",
        march = "rv64imac_zicsr_zifencei",
        mattr = "+m,+a,+c,+relax",
        mflags = "",
        mcmodel = "medany",
        cmodel = "medium",
        qemu = "qemu-system-riscv64 -M virt -bios none -smp 4 -m 2G",
        timer = 3580000 * 2,
    },
    visionfive = {
        arch = "riscv64",
        triple = "riscv64-unknown-elf",
        board = "visionfive",
        mabi = "lp64",
        march = "rv64imac_zicsr_zifencei",
        mattr = "+m,+a,+c,+relax",
        mflags = "",
        mcmodel = "medany",
        cmodel = "medium",
        qemu = "qemu-system-riscv64 -M visionfive -bios none -smp 4 -m 2G",
        timer = 6250000,
    },
    visionfive2 = {
        arch = "riscv64",
        triple = "riscv64-unknown-elf",
        board = "visionfive2",
        mabi = "lp64",
        march = "rv64imac_zicsr_zifencei",
        mattr = "+m,+a,+c,+relax",
        mflags = "",
        mcmodel = "medany",
        cmodel = "medium",
        qemu = "qemu-system-riscv64 -M visionfive2 -bios none -smp 4 -m 2G",
        timer = 4000000,
    }
}

local _, uconf = pcall(include, "build/conf.knit")
conf = {
    board = choose(cli.board, uconf.board, "virt_riscv64"),
    profile = choose(cli.profile, uconf.profile, "dev"),
    unified = choose(tobool(cli.unified), uconf.unified, false),
    dc = choose(cli.dc, uconf.dc, "ldc"),
    sanitize = choose(tobool(cli.sanitize), uconf.sanitize, false),
    cmdebug = choose(tobool(cli.cmdebug), uconf.cmdebug, true),
    coremark = choose(tobool(cli.coremark), uconf.coremark, false),
}

function makedep(s, output)
    return sel(conf.dc == "gdc", f"-M -MF $s -MT $output", f"-makedeps=$s")
end

function version(s)
    return sel(conf.dc == "gdc", f"-fversion=$s", f"-d-version=$s")
end

function noobj()
    return sel(conf.dc == "gdc", "-fsyntax-only", "-c -o-")
end

function nopattern()
    return sel(conf.dc == "gdc", "-fno-tree-loop-distribute-patterns -fno-lto", "-disable-simplify-libcalls")
end

opt = getopt(conf.profile)

machine = machines[conf.board]
if machine == nil then
    error("invalid board: " .. conf.board)
end

local objdir = f".build/$(machine.board)/obj"
local depdir = f".build/$(machine.board)/dep"

local prefix = machine.triple

tools = {
    ldc := ldc2
    gdc := $prefix-gdc
    cc := $prefix-gcc
    as := $prefix-as
    ld := $prefix-ld
    objcopy := $prefix-objcopy
    objdump := $prefix-objdump
    ar := $prefix-gcc-ar
    strip := $prefix-strip
    gdb := gdb-multiarch
    ranlib := $prefix-gcc-ranlib
    qemu = machine.qemu,
}

tools.dc = sel(conf.dc == "gdc", tools.gdc, tools.ldc)

function gnu(machine)
    local f = {
        aarch64 := -march=$(machine.march) -mcpu=$(machine.mcpu) $(machine.mflags)
        riscv64 := -march=$(machine.march) -mcmodel=$(machine.mcmodel) -mabi=$(machine.mabi) $(machine.mflags)
    }
    return f[machine.arch]
end

function llvm(machine)
    local f = {
        aarch64 := -mtriple=$(machine.triple) -mcpu=$(machine.mcpu) -mattr=$(machine.mattr)
        riscv64 := -mtriple=$(machine.triple) -mattr=$(machine.mattr) -code-model=$(machine.cmodel) -mabi=$(machine.mabi)
    }
    return f[machine.arch]
end

function getlto(machine)
    if not opt.lto then
        return {
            plugin = "",
            flags = "",
        }
    end
    if conf.dc == "gdc" then
        return {
            plugin = "",
            flags = "-flto",
        }
    end
    local ltoplugin = knit.shell("dirname $(which ldc2)") .. "/../lib/LLVMgold-ldc.so"
    ldlto := -Wl,-plugin=$ltoplugin -Wl,-plugin-opt=O2 -Xlinker -plugin-opt=-mattr=$(machine.mattr)
    if machine.arch == "riscv64" then
        ldlto = ldlto .. f" -Wl,-plugin-opt=-code-model=$(machine.cmodel)"
    end
    return {
        plugin = f"--plugin=$ltoplugin",
        flags = ldlto,
    }
end

lto = getlto(machine)

function gdc(machine)
    local sanitize = sel(conf.sanitize, "-fsanitize=undefined -fversion=sanitizer", "")
    local f := $(gnu(machine)) -$(opt.level) -ffunction-sections -fdata-sections -nophoboslib -fno-exceptions -fno-moduleinfo -fno-rtti -g -Wframe-larger-than=1024 -Wall -Werror -nostdinc -ftransition=tls $(version(machine.board)) -Wno-builtin-declaration-mismatch $(sel(opt.lto, "-flto", "")) -J. $sanitize
    return f
end

function ldc(machine)
    local f := $(llvm(machine)) -betterC -$(opt.level) -g -function-sections -data-sections -fvisibility=hidden $(version(machine.board)) $(sel(opt.lto, "-flto=full", "")) -J.
    return f
end

local incdi := -I$depdir/src -I$depdir/lib
local inc := -Isrc -Ilib

local flags = {
    gnu := $(gnu(machine))
    llvm := $(llvm(machine))
    gdc := $(gdc(machine)) $(inc)
    ldc := $(ldc(machine)) $(inc)
    cc := $(gnu(machine)) -$(opt.level)
    as := $(gnu(machine)) -xassembler-with-cpp
    qemu := -nographic -no-reboot
    objdump := -j .text -j .data -j .rodata -j .bss -j .stack -j .heap -j .payload -d
}
flags.dc = sel(conf.dc == "gdc", flags.gdc, flags.ldc)

local src = {}

function src.libplix_kernel()
    return knit.join(
        knit.glob(f"src/plix/arch/$(machine.arch)/*.d"),
        knit.glob(f"src/plix/arch/*.d"),
        knit.rglob("src/plix/dev", "*.d"),
        knit.rglob("src/plix/alloc", "*.d"),
        knit.rglob("src/plix/fs", "*.d"),
        knit.glob("src/plix/*.d"),
        {
            f"src/plix/board/$(machine.board).d",
            "src/plix/board/package.d",
        }
    )
end

function src.libplix_monitor()
    return knit.join(
        knit.glob(f"src/plix/arch/$(machine.arch)/*.d"),
        knit.glob(f"src/plix/arch/$(machine.arch)/monitor/*.d"),
        knit.glob(f"src/plix/arch/*.d"),
        knit.rglob("src/plix/dev", "*.d"),
        knit.rglob("src/plix/check", "*.d"),
        knit.rglob("src/plix/alloc", "*.d"),
        {
            f"src/plix/board/$(machine.board).d",
            "src/plix/board/package.d",
            "src/plix/start.d",
            "src/plix/panic.d",
            "src/plix/print.d",
            "src/plix/sanitizer.d",
            "src/plix/monitor.d",
            "src/plix/guard.d",
            "src/plix/crc.d",
            "src/plix/cpu.d",
            "src/plix/timer.d",
            "src/plix/spinlock.d",
        }
    )
end

function src.core()
    return knit.rglob("lib/core", "*.d")
end

function src.boot()
    return {}
end

function src.kernel()
    return knit.glob("src/kernel/*.d")
end

local asm = {}

function asm.libplix_kernel()
    return knit.join(
        knit.glob(f"src/plix/arch/$(machine.arch)/*.s")
    )
end

function asm.libplix_monitor()
    return knit.join(
        knit.glob(f"src/plix/arch/$(machine.arch)/monitor/*.s")
    )
end

function asm.boot()
    return knit.join(
        knit.glob(f"src/boot/*.s")
    )
end

function di(srcs)
    if conf.unified then
        return {}
    end
    return knit.prefix(knit.extrepl(srcs, ".d", ".di"), depdir .. "/")
end

function getobj(src, asm, pkg, typ)
    local dir = objdir
    if typ ~= nil then
        dir = objdir .. "/" .. typ
    end
    if not conf.unified then
        return knit.join(
            knit.prefix(knit.extrepl(src, ".d", ".o"), dir .. "/"),
            knit.prefix(knit.extrepl(asm, ".s", ".asm.o"), dir .. "/")
        )
    else
        return knit.join(
            {dir .. "/" .. pkg .. ".o"},
            knit.prefix(knit.extrepl(asm, ".s", ".asm.o"), dir .. "/")
        )
    end
end

local obj = {
    libplix = {
        kernel = getobj(src.libplix_kernel(), asm.libplix_kernel(), "plix", "kernel"),
        monitor = getobj(src.libplix_monitor(), asm.libplix_monitor(), "plix", "monitor"),
    },
    core = getobj(src.core(), {}, "core", nil),
    boot = {f"$objdir/lib/config.monitor.o"},
    kernel = knit.join(getobj(src.kernel(), {}, "kernel", nil), {f"$objdir/lib/config.kernel.o"}),
}

local extraobj := $objdir/lib/builtins.o $objdir/lib/object.o $objdir/lib/gcc/builtins.o

local link = {
    kernel = f"link/$(conf.board)/kernel.ld",
    boot = f"link/$(conf.board)/boot.ld",
}

local plboot = {
    bin = "tools/plboot/plboot",
    src = knit.glob("tools/plboot/*.go"),
}

local o = sel(conf.dc == "gdc", "o", "of")

local coremark = sel(conf.coremark, "coremark/libcoremark.a", "")

return b{
    $ all:VB: kernel.boot.elf

    $ libplix.kernel.a: $objdir/libplix.kernel.a
        mv $input $output
    $ libplix.monitor.a: $objdir/libplix.monitor.a
        mv $input $output

    $ boot.elf: $objdir/src/boot/main-uart.o $(obj.boot) $objdir/libplix.monitor.a $(link.boot)[I]
        $(tools.cc) $(flags.gnu) $(lto.flags) -Wl,--gc-sections -T$(link.boot) -nostdinc -nostdlib $input -lgcc -o $output
    $ kernel.boot.elf: $objdir/src/boot/main-payload.o $objdir/src/boot/payload.o $(obj.boot) $objdir/libplix.monitor.a $(link.boot)[I]
        $(tools.cc) $(flags.gnu) $(lto.flags) -Wl,--gc-sections -T$(link.boot) -nostdinc -nostdlib $input -lgcc -o $output
    $ kernel.elf: $(obj.kernel) $(coremark) $objdir/libplix.kernel.a $(link.kernel)[I]
        $(tools.cc) $(flags.gnu) $(lto.flags) -Wl,--gc-sections -T$(link.kernel) -nostdinc -nostdlib $input -lgcc -o $output

    $ $objdir/libplix.kernel.a: $(obj.libplix.kernel) $(obj.core) $extraobj
        rm -f $output
        $(tools.ar) -rcs $output $input
        $(tools.ranlib) $(lto.plugin) $output

    $ $objdir/libplix.monitor.a: $(obj.libplix.monitor) $(obj.core) $extraobj
        rm -f $output
        $(tools.ar) -rcs $output $input
        $(tools.ranlib) $(lto.plugin) $output


    $ $objdir/src/boot/main-uart.o:D[$depdir/src/boot/main.dep]: src/boot/main.d
        $(tools.dc) $(incdi) $(flags.dc) $(makedep(dep, output)) $(version("uart")) -c $input -$o $output
    $ $objdir/src/boot/main-payload.o:D[$depdir/src/boot/main.dep]: src/boot/main.d
        $(tools.dc) $(incdi) $(flags.dc) $(makedep(dep, output)) -c $input -$o $output
    $ $objdir/src/boot/payload.o: src/boot/payload.s kernel.payload
        $(tools.cc) $(flags.as) -c -o $output $(inputs[1]) -DPAYLOAD=$(inputs[2])

    $ $depdir/%.di: %.d user/hello/hello.elf[I] fs.img[I]
        $(tools.dc) $(flags.dc) $(noobj()) -Hf $output $input -O0

    $ $objdir/core.o: $(src.core())
        $(tools.dc) $(flags.dc) -c $input -$o $output
    $ $objdir/kernel/plix.o: $(src.libplix_kernel()) [[$(src.core())]][I]
        $(tools.dc) $(flags.dc) -c $input -$o $output $(version("kernel"))
    $ $objdir/monitor/plix.o: $(src.libplix_monitor()) [[$(src.core())]][I]
        $(tools.dc) $(flags.dc) -c $input -$o $output $(version("monitor"))
    $ $objdir/kernel.o: $(src.kernel()) [[$(src.core()) $(src.libplix_kernel())]][I]
        $(tools.dc) $(flags.dc) -c $input -$o $output
    $ $objdir/lib/builtins.o: lib/builtins.d
        $(tools.dc) $(flags.dc) -c $input -$o $output $(nopattern())
    $ $objdir/lib/gcc/builtins.o: lib/gcc/builtins.d
        $(tools.dc) $(flags.dc) -c $input -$o $output $(nopattern())
    $ $objdir/lib/config.monitor.o: lib/config.d
        $(tools.dc) $(flags.dc) -c $input -$o $output $(version("monitor"))
    $ $objdir/lib/config.kernel.o: lib/config.d
        $(tools.dc) $(flags.dc) -c $input -$o $output $(version("kernel"))

    $ $objdir/monitor/%.o:D[$depdir/%.dep]: %.d [[$depdir/%.di]][I]
        $(tools.dc) $(incdi) $(flags.dc) $(makedep(dep, output)) -c $input -$o $output $(version("monitor"))
    $ $objdir/kernel/%.o:D[$depdir/%.dep]: %.d [[$depdir/%.di]][I] user/hello/hello.elf[I] fs.img[I]
        $(tools.dc) $(incdi) $(flags.dc) $(makedep(dep, output)) -c $input -$o $output $(version("kernel"))
    $ $objdir/%.o:D[$depdir/%.dep]: %.d [[$depdir/%.di]][I]
        $(tools.dc) $(incdi) $(flags.dc) $(makedep(dep, output)) -c $input -$o $output
    $ $objdir/monitor/%.asm.o: %.s
        $(tools.cc) $(flags.as) $input -c -o $output
    $ $objdir/kernel/%.asm.o: %.s
        $(tools.cc) $(flags.as) $input -c -o $output

    $ coremark/libcoremark.a:B:
        make -B -C coremark PORT_DIR=multiplix PORT_CFLAGS="$(flags.cc) $(sel(conf.cmdebug, "-DCORE_DEBUG=1", "")) -DTIMER_FREQ=$(machine.timer)" CC=$(tools.cc)

    $ %.list: %.elf
        $(tools.objdump) $(flags.objdump) $input > $output
    $ %.bin: %.elf
        $(tools.objcopy) $input -O binary $output
    $ %.img: %.bin
        vf2-imager -i $input -o $output
    $ %.payload: %.elf $(plboot.bin)[I]
        ./$(plboot.bin) make -o $output $input
    $ prog:VB: kernel.elf $(plboot.bin)[I]
        ./$(plboot.bin) prog $input
    $ $(plboot.bin): $(plboot.src)
        cd tools/plboot && go build
    $ qemu:VB: kernel.boot.elf
        $(tools.qemu) $(flags.qemu) -kernel $input
    $ qemu-gdb:VB: kernel.boot.elf kernel.elf
        $(tools.qemu) $(flags.qemu) -kernel $(inputs[1]) -s -S &
        $(tools.gdb) -ex "file $(inputs[2])" -ex "target remote localhost:1234"
    $ spike:VB: kernel.boot.elf
        spike -p4 $input

    $ lint:VB:
        dscanner --styleCheck $(knit.rglob(".", "*.d")) --config .dscanner.ini $(inc) --errorFormat '{filepath}({line},{column}): Error: [{type}] {message}'

    $ fs.img: README.md tools/mkfs/mkfs[I]
        ./tools/mkfs/mkfs fs.img README.md

    include("tools/mkfs/Knitfile"),
    include("user/hello/build.knit"),
    include("firmware/raspi/build.knit"),
}
