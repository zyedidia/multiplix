local knit = require("knit")

function sel(cond, t, f)
    if cond then return t else return f end
end

local build = include("build/build.knit")
local conf = include("build/default.knit")

local machine = build.machine(conf.board, false)
if machine == nil then
    return "could not find machine for board " .. conf.board
end

local tools = build.tools(machine)
local flags = build.flags(machine, conf.lto, conf.release, false)

local meta = r{
    $ .kobj/%.o: %.s
        $(tools.cc) $(flags.as) $input -c -o $output
    $ .kobj/%.o:D[.kobj/deps/%.dep]: %.d
        $(tools.dc) $(flags.dc) -I. -Ilibd $input -c -of $output -makedeps=.kobj/deps/$match.dep
    $ %.bin: %.elf
        $(tools.objcopy) $input -O binary $output
    $ %.boot.elf:B: %.payload
        knit -f build/bootloader.knit kboot=1 kenter=1 payload=$input bootloader.elf board=$(conf.board) release=$(conf.release) lto=$(conf.lto)
        mv bootloader.elf $output
    $ %.boot.bin:B: %.payload
        knit -f build/bootloader.knit kboot=1 kenter=1 payload=$input bootloader.bin board=$(conf.board) release=$(conf.release) lto=$(conf.lto)
        mv bootloader.bin $output
    $ %.boot.list:B: %.payload
        knit -f build/bootloader.knit kboot=1 kenter=1 payload=$input bootloader.list board=$(conf.board) release=$(conf.release) lto=$(conf.lto)
        mv bootloader.list $output
    $ %.bin.out: %.bin
        ./firmware/visionfive/fsz.sh $input $output
    $ %.payload: %.elf
        plboot make -o $output $input
    $ %.list: %.elf
        $(tools.objdump) -D $input > $output
    $ %.img: %.bin
        vf2-imager -i $input -o $output
}

local lib = knit.rglob("libd", "*.d")

local kernel = knit.join(
    knit.rglob(f"kernel/arch/$(machine.arch)", "*.d"),
    knit.rglob("kernel/dev", "*.d"),
    knit.filterout(knit.glob("kernel/*.d"), {"kernel/main.d"}),
    {
        "kernel/arch/package.d",
        "kernel/board/package.d",
        f"kernel/board/$(machine.board).d",
    }
)

local src = {
    kernel = knit.join(
        lib,
        kernel,
        {
            "kernel/main.d",
        }
    )
}

local asmobj = {
    f"kernel/arch/$(machine.arch)/kernelasm.o",
    f"kernel/arch/$(machine.arch)/userasm.o",
}

local obj = {
    kernel = knit.join(
        knit.extrepl(src.kernel, ".d", ".o"),
        asmobj
    ),
}
obj.kernel = knit.prefix(".kobj/", obj.kernel)
asmobj = knit.prefix(".kobj/", asmobj)

local link = {
    kernel = f"link/$(machine.board)/kernel.ld",
    extra = sel(conf.entry == nil, "", f"-Wl,--section-start=.text=$(conf.entry)"),
}

local kernel = r{
    $ kernel.elf: $(obj.kernel) $(link.kernel)[I]
        $(tools.ld) $(flags.ld) -T$(link.kernel) $(link.extra) $input -o $output
    $ qemu:VB: kernel.boot.elf
        $(tools.qemu) $(flags.qemu) -no-reboot -kernel $input
    $ qemu-gdb:VB: kernel.boot.elf
        $(tools.qemu) $(flags.qemu) -no-reboot -s -S -kernel $input &
        $(tools.gdb) -ex "file kernel.elf" -ex "target remote localhost:1234"
}

local allsrc = knit.rglob(".", "*.d")

local tests = knit.glob("test/*")
local testr = r{}
local alltest = ""

for i, test in ipairs(tests) do
    testr = testr + r{
        $ test-$test:VBQ:
            knit -q -f build/test.knit test=multicore-boot qemu
    }
    alltest = alltest .. f" test-$test"
end

return b{
    $ all:V: kernel.boot.bin

    $ comp:V: kernel.boot.bin $(knit.prefix("lint-", allsrc))

    $ bootloader.elf:B:
        knit -f build/bootloader.knit kboot=1 kenter=1 bootloader.elf board=$(conf.board) release=$(conf.release) lto=$(conf.lto)

    $ format:VB:
        dfmt -i --brace_style=otbs $allsrc

    $ clean:VB:
        knit -f build/bootloader.knit :all -t clean
        knit :all -t clean
        rm -rf *.list *.bin *.bin.out

    $ prog:VB: kernel.elf
        plboot prog $input

    $ lint:VBQ:
        dscanner --styleCheck $allsrc --config .dscanner.ini -I. -Ilibd --errorFormat '{filepath}({line},{column}): Error: [{type}] {message}'

    $ lint-%:VBQ: %
        dscanner --styleCheck $input --config .dscanner.ini -I. -Ilibd --errorFormat '{filepath}({line},{column}): Error: [{type}] {message}'

    $ kernel.full.o: $(src.kernel)
        $(tools.dc) $(flags.dc) -I. -Ilibd $input -c -of $output
    $ kernel.full.elf: kernel.full.o $(asmobj) $(link.kernel)[I]
        $(tools.ld) $(flags.ld) -T$(link.kernel) $(link.extra) $input -o $output

    $ test:VB: $alltest

    $ .kobj/kernel/main.o: user/hello/hello.elf

    $ user/hello/hello.elf:B:
        knit -C user/hello board=$(conf.board)

    testr,
    kernel,
    meta
}
