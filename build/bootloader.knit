local monitor = true
local machine = build.machine(conf.board, monitor)
local bootloader = {
    tools = build.tools(machine),
    flags = build.flags(machine, conf.lto, conf.release, monitor)
}

function bootloader.meta()
    local flags = bootloader.flags
    local tools = bootloader.tools

    return r{
        $ .bootobj/%.o: %.s
            $(tools.cc) $(flags.as) $input -c -o $output
        $ .bootobj/%.o:D[.bootobj/deps/%.dep]: %.d
            $(tools.dc) $(flags.dc) -Ikernel -Ilibd $input -c -$of $output $(makedeps(f".bootobj/deps/$match.dep", output))
    }
end

function bootloader.rules(bootelf, payload, unified)
    local vpayload = sel(payload == nil, "uart", "payload")

    local objects = {f".bootobj/bootloader/main-$vpayload.o"}

    if payload ~= nil then
        objects = knit.join(objects, {".bootobj/bootloader/payload.o"})
    else
        payload = ""
    end

    local link = f"link/$(machine.board)/bootloader.ld"

    local rules
    if conf.unified then
        rules = b{
            $ .bootobj/bootloader/main-$vpayload.o:D[.bootobj/deps/bootloader/main.dep]: bootloader/main.d
                $(tools.dc) $(flags.dc) -Ikernel -Ilibd $input -c -$of $output $(makedeps(".bootobj/deps/bootloader/main.dep", output)) $(dversion(vpayload))
            $ .bootobj/bootloader.o: $(src.libmonitor())
                $(tools.dc) $(flags.dc) -I. -Ilibd $input -c -$of $output
            $ $bootelf: .bootobj/bootloader.o $(obj.masm()) $(objects) $(link)[I]
                $(tools.ld) -T$(link) $input -o $output $(flags.ld)
        }
    else
        rules = b{
            $ .bootobj/bootloader/main-$vpayload.o:D[.bootobj/deps/bootloader/main.dep]: bootloader/main.d
                $(tools.dc) $(flags.dc) -Ikernel -Ilibd $input -c -$of $output $(makedeps(".bootobj/deps/bootloader/main.dep", output)) $(dversion(vpayload))
            $ $bootelf: $(obj.libmonitor()) $(objects) $(link)[I]
                $(tools.ld) -T$(link) $input -o $output $(flags.ld)
        }
    end

    if payload ~= "" then
        rules = rules +
            $ .bootobj/bootloader/payload.o: bootloader/payload.s $(payload)
                $(tools.cc) $(flags.as) -c -o $output $(inputs[1]) -DPAYLOAD=$(payload)
    end

    return rules
end

return bootloader
